remark: /wrk/ci/prod/2022.2/hls_product/continuous/608/2022.2/src/shared/hls/clib/hlsmath/include/FloatingPoint/hls_case_IEEE754.h:12:0: Inlining function 'fp_struct<double>::fp_struct(double)' into 'int generic_cast_IEEE754<int, (ap_q_mode)6, double>(double, bool, hls::enable_if<std::numeric_limits<int>::is_signed, bool>::type)'
remark: /wrk/ci/prod/2022.2/hls_product/continuous/608/2022.2/src/shared/hls/clib/hlsmath/include/FloatingPoint/hls_case_IEEE754.h:12:0: Inlining function 'fp_struct<double>::mantissa() const' into 'int generic_cast_IEEE754<int, (ap_q_mode)6, double>(double, bool, hls::enable_if<std::numeric_limits<int>::is_signed, bool>::type)'
remark: /wrk/ci/prod/2022.2/hls_product/continuous/608/2022.2/src/shared/hls/clib/hlsmath/include/FloatingPoint/hls_case_IEEE754.h:12:0: Inlining function 'fp_struct<double>::expv() const' into 'int generic_cast_IEEE754<int, (ap_q_mode)6, double>(double, bool, hls::enable_if<std::numeric_limits<int>::is_signed, bool>::type)'
remark: /wrk/ci/prod/2022.2/hls_product/continuous/608/2022.2/src/shared/hls/clib/hlsmath/include/FloatingPoint/hls_case_IEEE754.h:12:0: Inlining function 'fp_struct<double>::__signbit() const' into 'int generic_cast_IEEE754<int, (ap_q_mode)6, double>(double, bool, hls::enable_if<std::numeric_limits<int>::is_signed, bool>::type)'
remark: /wrk/ci/prod/2022.2/hls_product/continuous/608/2022.2/src/shared/hls/clib/hlsmath/include/FloatingPoint/hls_case_IEEE754.h:116:0: Inlining function 'int generic_cast_IEEE754<int, (ap_q_mode)6, double>(double, bool, hls::enable_if<std::numeric_limits<int>::is_signed, bool>::type)' into 'int generic_cast_IEEE754<int, double>(double, bool)'
remark: /wrk/ci/prod/2022.2/hls_product/continuous/608/2022.2/src/shared/hls/clib/hlsmath/src/lib_floatconversion.cpp:55:0: Inlining function 'int generic_cast_IEEE754<int, double>(double, bool)' into '__hls_fptosi_double_i32'
remark: /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:11:0: Inlining function '__hls_fptosi_double_i32' into 'topKQueryScores'
remark: /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:18:26: Sequential read of length 3 has been inferred _XLX_SEP_ OldID=for.inc.load.6,  _XLX_SEP_ query_typeseq query_type gmem VITIS_LOOP_18_2 /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:18:26 topKQueryScores 
remark: /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:24:22: Sequential write of variable length has been inferred _XLX_SEP_ OldID=for.inc37.store.3,  _XLX_SEP_ topK_indicesseq topK_indices gmem VITIS_LOOP_24_3 /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:24:22 topKQueryScores 
remark: /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:19:40: Stride is incompatible _XLX_SEP_ for.inc.load.9 fs_matrix gmem VITIS_LOOP_18_2 /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:18:26 topKQueryScores 
remark: /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:18:26: Could not analyze pattern _XLX_SEP_ query_typeseq query_type gmem VITIS_LOOP_16_1 /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:16:22 topKQueryScores 
remark: /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:24:22: Sequential access length is not divisible by 2 _XLX_SEP_ topK_indicesseq topK_indices gmem VITIS_LOOP_24_3 /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:24:22 topKQueryScores 
remark: /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:18:26: Sequential access length is not divisible by 2 _XLX_SEP_ query_typeseq query_type gmem VITIS_LOOP_18_2 /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:18:26 topKQueryScores 
warning: /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:11:0: interface mode 'ap_none' with wrong type '[238 x double]*'
warning: /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:11:0: interface mode 'ap_none' with wrong type 'i32*'
remark: /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:18:26: Inferred burst reverted due to burst accesses data width is different from m_axi port width _XLX_SEP_ query_typeseq  query_type topKQueryScores 
remark: /home/nmath018/topK_feature/hls_catch22/src/krnl.cpp:24:22: Inferred burst reverted due to burst accesses data width is different from m_axi port width _XLX_SEP_ topK_indicesseq  topK_indices topKQueryScores 
